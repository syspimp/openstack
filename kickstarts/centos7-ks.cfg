#version=RHEL7
# System authorization information
auth --enableshadow --passalgo=sha512
repo --name="os" --baseurl=http://yum.yourcompany.com/proxy/centos7u1.x86_64/ --cost=100
repo --name="updates" --baseurl=http://yum.yourcompany.com/proxy/centos7.x86_64.yum/2015Q4V1 --cost=100

# Reboot after installation
reboot
# Use network installation
url --url="http://yum.yourcompany.com/proxy/centos7u1.x86_64/"


# Use text mode install
text

# Firewall configuration
firewall --enabled --service=ssh
firstboot --disable
ignoredisk --only-use=sda
# Keyboard layouts
keyboard --vckeymap=us --xlayouts='us'
# System language
lang en_US.UTF-8

# Network information
network  --bootproto=dhcp
network  --bootproto=dhcp --hostname=localhost.localdomain
# Root password
rootpw --iscrypted $1$Jonb.mqw$IZyZIDAMaoaP1FAFncfZD1
# SELinux configuration
selinux --disabled
# System services
services --disabled="kdump" --enabled="network,sshd,rsyslog,chronyd"
# Do not configure the X Window System
skipx
# System timezone
timezone UTC --isUtc
# System bootloader configuration
bootloader --append="console=tty0" --location=mbr --timeout=1 --boot-drive=sda
# Clear the Master Boot Record
zerombr
# Partition clearing information
clearpart --all --initlabel 
# Disk partitioning information
part / --fstype="ext4" --ondisk=sda --size=8191

%post --erroronfail
# send post stdout and stderr to Jenkins build log
exec > /dev/tcp/10.152.82.31/4446
exec 2> /dev/tcp/10.152.82.31/4446
set -x
ifconfig
# workaround anaconda requirements
#passwd -d root
#passwd -l root

# Create grub.conf for EC2. This used to be done by appliance creator but
# anaconda doesn't do it. And, in case appliance-creator is used, we're
# overriding it here so that both cases get the exact same file.
# Note that the console line is different -- that's because EC2 provides
# different virtual hardware, and this is a convenient way to act differently
echo -n "Creating grub.conf for pvgrub"
rootuuid=$( awk '$2=="/" { print $1 };'  /etc/fstab )
mkdir /boot/grub
echo -e 'default=0\ntimeout=0\n\n' > /boot/grub/grub.conf
for kv in $( ls -1v /boot/vmlinuz* |grep -v rescue |sed s/.*vmlinuz-//  ); do
  echo "title CentOS Linux 7 ($kv)" >> /boot/grub/grub.conf
  echo -e "\troot (hd0)" >> /boot/grub/grub.conf
  echo -e "\tkernel /boot/vmlinuz-$kv ro root=$rootuuid console=hvc0 LANG=en_US.UTF-8" >> /boot/grub/grub.conf
  echo -e "\tinitrd /boot/initramfs-$kv.img" >> /boot/grub/grub.conf
  echo
done

#link grub.conf to menu.lst for ec2 to work
echo -n "Linking menu.lst to old-style grub.conf for pv-grub"
ln -sf grub.conf /boot/grub/menu.lst
ln -sf /boot/grub/grub.conf /etc/grub.conf

# setup systemd to boot to the right runlevel
echo -n "Setting default runlevel to multiuser text mode"
rm -f /etc/systemd/system/default.target
ln -s /lib/systemd/system/multi-user.target /etc/systemd/system/default.target
echo .

# this is installed by default but we don't need it in virt
echo "Removing linux-firmware package."
yum -C -y remove linux-firmware

# Remove firewalld; it is required to be present for install/image building.
echo "Removing firewalld."
yum -C -y remove firewalld --setopt="clean_requirements_on_remove=1"

# remove avahi and networkmanager
echo "Removing avahi/zeroconf and NetworkManager"
yum -C -y remove avahi\* Network\*

echo -n "Getty fixes"
# although we want console output going to the serial console, we don't
# actually have the opportunity to login there. FIX.
# we don't really need to auto-spawn _any_ gettys.
sed -i '/^#NAutoVTs=.*/ a\
NAutoVTs=0' /etc/systemd/logind.conf

echo -n "Network fixes"
# initscripts don't like this file to be missing.
cat > /etc/sysconfig/network << EOF
NETWORKING=yes
NOZEROCONF=yes
EOF

# For cloud images, 'eth0' _is_ the predictable device name, since
# we don't want to be tied to specific virtual (!) hardware
rm -f /etc/udev/rules.d/70*
ln -s /dev/null /etc/udev/rules.d/80-net-name-slot.rules

# simple eth0 config, again not hard-coded to the build hardware
cat > /etc/sysconfig/network-scripts/ifcfg-eth0 << EOF
DEVICE="eth0"
BOOTPROTO="dhcp"
ONBOOT="yes"
TYPE="Ethernet"
USERCTL="yes"
PEERDNS="yes"
IPV6INIT="no"
PERSISTENT_DHCLIENT="1"
EOF

# set virtual-guest as default profile for tuned
echo "virtual-guest" > /etc/tuned/active_profile

# generic localhost names
cat > /etc/hosts << EOF
127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4
::1         localhost localhost.localdomain localhost6 localhost6.localdomain6

EOF
echo .

# Because memory is scarce resource in most cloud/virt environments,
# and because this impedes forensics, we are differing from the Fedora
# default of having /tmp on tmpfs.
echo "Disabling tmpfs for /tmp."
systemctl mask tmp.mount

cat <<EOL > /etc/sysconfig/kernel
# UPDATEDEFAULT specifies if new-kernel-pkg should make
# new kernels the default
UPDATEDEFAULT=yes

# DEFAULTKERNEL specifies the default kernel package type
DEFAULTKERNEL=kernel
EOL

# make sure firstboot doesn't start
echo "RUN_FIRSTBOOT=NO" > /etc/sysconfig/firstboot

# workaround https://bugzilla.redhat.com/show_bug.cgi?id=966888
#if ! grep -q growpart /etc/cloud/cloud.cfg; then
#  sed -i 's/ - resizefs/ - growpart\n - resizefs/' /etc/cloud/cloud.cfg
#fi


#echo -e 'cloud-user\tALL=(ALL)\tNOPASSWD: ALL' >> /etc/sudoers

echo "Cleaning old yum repodata."
yum clean all

echo "set instance type markers"
echo 'genclo' > /etc/yum/vars/infra

# chance dhcp client retry/timeouts to resolve #6866
cat  >> /etc/dhcp/dhclient.conf << EOF

timeout 300
retry 60
EOF

# clean up installation logs"
rm -rf /var/log/yum.log
rm -rf /var/lib/yum/*
rm -rf /root/install.log
rm -rf /root/install.log.syslog
rm -rf /root/anaconda-ks.cfg
rm -rf /var/log/anaconda*
rm -rf /root/anac*

echo "Fixing SELinux contexts."
touch /var/log/cron
touch /var/log/boot.log
mkdir -p /var/cache/yum
/usr/sbin/fixfiles -R -a restore

# reorder console entries
sed -i 's/console=tty0/console=tty0 console=ttyS0,115200n8/' /boot/grub2/grub.cfg

#echo "Zeroing out empty space."
### This forces the filesystem to reclaim space from deleted files
#dd bs=1M if=/dev/zero of=/var/tmp/zeros || :
#rm -f /var/tmp/zeros
#echo "(Don't worry -- that out-of-space error was expected.)"

echo "start yourcompany config"
# Clean up yum
#sed -i 's/distroverpkg=centos-release/distroverpkg=redhat-release/' /etc/yum.conf
grep -q "gpgcheck" /etc/yum.conf
if [[ $? -eq 0 ]]
then
        sed -i 's/gpgcheck.*/gpgcheck=0/' /etc/yum.conf
else
        echo "gpgcheck=0" >> /etc/yum.conf
fi

#Enable plugins, but disable all other plugins
sed -i 's/plugins.*/plugins=1/' /etc/yum.conf

#Disable plugins (fastest mirror)
for i in `ls /etc/yum/pluginconf.d/` ; do
  sed -ci 's/enabled.*/enabled=0/' /etc/yum/pluginconf.d/${i}
done

# Move the existing Repos
cd /etc/yum.repos.d
for file in `ls *.repo`; do
        mv $file /tmp/${file}.bak
done

# Write new repo files
cat > /etc/yum.repos.d/os.repo << EOF
# CentOS updates
[2015Q4V1-centos7-x86_64]
name=x86_64-cento7-x86_64
baseurl=http://yum.yourcompany.com/proxy/centos7.x86_64.yum/2015Q4V1

# Base CentOS
[BASE-centos7-x86_64]
name=BASE-centos7-x86_64
baseurl=http://yum.yourcompany.com/proxy/centos7u1.x86_64
EOF

chmod 644 /etc/yum.repos.d/os.repo

# install gpg key
rpm --import http://yum.yourcompany.com/proxy/centos7u1.x86_64/RPM-GPG-KEY-CentOS-7

echo "disabling selinux and updating selinux-policy due to bug in selinux-policy-3.12.1"
setenforce 0
#yum clean expire-cache
#yum update selinux-policy\*

# update all base rpms
yum -y update
yum clean all

# remove regenerated upstream repos
for file in `ls CentOS*.repo`; do
      mv $file /tmp/
done

# epel rpms
cat > /etc/yum.repos.d/epel.repo << EOF
[epel-centos7-x86_64]
name=epel-centos7-x86_64
baseurl=http://yum.yourcompany.com/proxy/epel.7.x86_64
EOF

chmod 644 /etc/yum.repos.d/epel.repo

# configm rpms
cat > /etc/yum.repos.d/configm.repo << EOF
[2014Q2V1-ConfigM-rhel7-x86_64]
name=2014Q2V1-ConfigM-rhel7-x86_64
baseurl=http://yum.yourcompany.com/proxy/configm/client/rhel7.x86_64/2014Q2V1
EOF

chmod 644 /etc/yum.repos.d/configm.repo

cd /tmp
# install cloud-init from rh-common, run puppet
yum -y install git puppet cloud-init cloud-utils-growpart subversion
yum -y install libselinux-python policycoreutils-python python-cheetah \
      python-configobj python-requests

# fix networking
sed -i -e '/HWADDR.*/d' /etc/sysconfig/network-scripts/ifcfg-eth0
sed -i -e '/UUID.*/d' /etc/sysconfig/network-scripts/ifcfg-eth0
rm -f /etc/udev/rules.d/70-persistent-net.rules

# fix cloud init
cat > /etc/cloud/templates/hosts.redhat.tmpl <<EOF
#*
    This file /etc/cloud/templates/hosts.redhat.tmpl is only utilized
    if enabled in cloud-config.  Specifically, in order to enable it
    you need to add the following to config:
      manage_etc_hosts: True
*#
# Your system has configured 'manage_etc_hosts' as True.
# As a result, if you wish for changes to this file to persist
# then you will need to either
# a.) make changes to the master file in /etc/cloud/templates/hosts.redhat.tmpl
# b.) change or remove the value of 'manage_etc_hosts' in
#     /etc/cloud/cloud.cfg or cloud-config from user-data
# 
# The following lines are desirable for IPv4 capable hosts
127.0.0.1 \${fqdn} \${hostname} 
127.0.0.1 localhost.localdomain localhost
127.0.0.1 localhost4.localdomain4 localhost4

# The following lines are desirable for IPv6 capable hosts
::1 \${fqdn} \${hostname}
::1 localhost.localdomain localhost
::1 localhost6.localdomain6 localhost6
EOF

cat > /etc/cloud/cloud.cfg <<EOF
# managed by puppet
users:
 - default

disable_root: 0
ssh_pwauth:   1

locale_configfile: /etc/sysconfig/i18n
mount_default_fields: [~, ~, 'auto', 'defaults,nofail', '0', '2']
resize_rootfs_tmp: /dev
ssh_deletekeys:   0
ssh_genkeytypes:  ~
syslog_fix_perms: ~

growpart:
  mode: auto
  devices: ['/']
  ignore_growroot_disabled: false

cloud_init_modules:
 - bootcmd
 - growpart
 - write-files
 - resizefs
 - update_etc_hosts
 - rsyslog
 - users-groups
 - ssh

cloud_config_modules:
 - mounts
 - locale
 - set-passwords
 - timezone
 - puppet
 - chef
 - salt-minion
 - mcollective
 - disable-ec2-metadata
 - runcmd

cloud_final_modules:
 - rightscale_userdata
 - scripts-per-once
 - scripts-per-boot
 - scripts-per-instance
 - scripts-user
 - ssh-authkey-fingerprints
 - keys-to-console
 - phone-home
EOF

cat > /etc/rc.d/rc.local <<EOF
#!/bin/sh
#
# This script will be executed *after* all the other init scripts.
# You can put your own initialization stuff in here if you don't
# want to do the full Sys V style init stuff.
#
# managed by puppet

touch /var/lock/subsys/local

# apply latest boot customizations and log it
firstbootdir=/yourcompany/tmp/firstboot
firstbootlog=\${firstbootdir}/rc.local.log

function firstboot()
{
  echo "###### Starting up on \$(date) ######"
  git clone https://gitlab.yourcompany.com/dtaylor6/puppet.git
  puppet apply --modulepath=\$(pwd)/puppet/modules -e 'include puppet_kickstart' -vvvd
  puppet apply --modulepath=\$(pwd)/puppet/modules -e 'include puppet_deploy' -vvvd
  rm -rf ./puppet
  echo "###### Firstboot complete on \$(date) ######"
}

if [ ! -d "\${firstbootdir}" ]
then
  mkdir -p \${firstbootdir} && cd \${firstbootdir}
  firstboot >> \$firstbootlog 2>&1
fi
EOF
chmod 755 /etc/rc.d/rc.local

echo "###### Installation finished. Full Installed RPM List ######"
rpm -qa
%end

%packages --ignoremissing
@core
bind-utils
chrony
cloud-init
cloud-utils-growpart
dracut-config-generic
dracut-norescue
firewalld
grub2
kernel
nfs-utils
rsync
tar
wget
yum-utils
ksh
ntp
ntpdate
# required for puppet run                                                                                                                           
net-snmp-libs                                                                                                                                       
lm_sensors-libs
-NetworkManager
-aic94xx-firmware
-alsa-firmware
-alsa-lib
-alsa-tools-firmware
-biosdevname
-iprutils
-ivtv-firmware
-iwl100-firmware
-iwl1000-firmware
-iwl105-firmware
-iwl135-firmware
-iwl2000-firmware
-iwl2030-firmware
-iwl3160-firmware
-iwl3945-firmware
-iwl4965-firmware
-iwl5000-firmware
-iwl5150-firmware
-iwl6000-firmware
-iwl6000g2a-firmware
-iwl6000g2b-firmware
-iwl6050-firmware
-iwl7260-firmware
-libertas-sd8686-firmware
-libertas-sd8787-firmware
-libertas-usb8388-firmware
-plymouth
%end
